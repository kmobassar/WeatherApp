{"version":3,"sources":["Component/Weather.Component.jsx","Component/Form.Component.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmax","temp_min","temp_max","description","error","role","Form","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","country","target","elements","value","fetch","api_call","json","response","console","log","setState","sys","celsius","calcelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.413e71cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Weather = (props) =>{\r\n    return(\r\n        <div className=\"Container text-light\">\r\n            <div className=\"Token pt-4\">\r\n    <h1>{props.city}</h1> \r\n            <h5 className=\"py-4\"> \r\n            <i className={`wi ${props.weatherIcon} display-1`}/>\r\n            </h5>\r\n           \r\n            {props.temp_celsius ? (\r\n          <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n        ) : null}\r\n            {minmax(props.temp_min,props.temp_max)}\r\n    <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n            </div>\r\n    );\r\n\r\n};\r\nfunction minmax(min,max){\r\nif(max && min){\r\n   return(\r\n        <h3>\r\n        <span className=\"px-4\">{min}&deg;</span>\r\n        <span className=\"px-4\">{max}&deg;</span>\r\n      </h3>\r\n\r\n   );\r\n   }\r\n\r\n}\r\nexport default Weather; \r\n","import React from 'react';\r\nimport './Form.style.css';\r\n\r\nconst Form=props=>{\r\n    return(\r\n        \r\n        <div className=\"Container\">\r\n              <div>{props.error ? error() :null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n      <input \r\n          type=\"text\"\r\n          className=\"form-control\"\r\n        name=\"city\"\r\n      autoComplete=\"off\"\r\n      placeholder=\"city\"\r\n   \r\n        />\r\n                </div>\r\n             <div className=\"col-md-3\">\r\n                <input \r\n                type=\"text\" \r\n                className=\"form-control\" \r\n                name=\"country\" \r\n                autoComplete=\"off\"\r\n                placeholder=\"country\"\r\n                />\r\n           </div>\r\n                <div className=\"col-md-3 mt-md-0  py-2 txt-md-left\">\r\n                    <button className=\"btn  btn-warning\">\r\n                        GET WEATHER\r\n                        </button>\r\n\r\n                </div>\r\n                </div>\r\n                </form>\r\n        </div>\r\n       \r\n    );\r\n\r\n};\r\nconst error = props => {\r\n    return (\r\n      <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n        Please Enter City and Country...!\r\n      </div>\r\n    );\r\n  };\r\nexport default Form;\r\n\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport  'weather-icons/css/weather-icons.css';\n\n\nimport Weather from './Component/Weather.Component.jsx';\n\nimport Form from './Component/Form.Component.js';\n\n\nimport './App.css';\nconst API_KEY = \"415e2cbc6a6ec76e6e9b7eb8e628eb60\";\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      city:undefined,\n      country: undefined,\n      icon:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      celsius:undefined,\n      main:undefined,\n      description:\"\",\n      error: false\n    };\n\n    this.weatherIcon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n  calcelsius(temp){\n    const cell=Math.floor (temp-273.15);\n    return cell;\n  }\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n\n  getWeather=async(e)=>{\n\n    e.preventDefault();\n  \n\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n    if (country && city) {\n\n    const api_call=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`)\n    const response =await api_call.json();\n    console.log(response);\n    this.setState({\n      \n      city: `${response.name}, ${response.sys.country}`,\n      country:response.sys.country,\n      celsius:this.calcelsius(response.main.temp),\n\n      temp_min:this.calcelsius(response.main.temp_min),\n      temp_max:this.calcelsius(response.main.temp_max),\n      description:response.weather[0].description,\n      error: false\n      \n\n    });\n    this.get_WeatherIcon(this.weatherIcon, response.weather[0].id); }\n    else {\n      this.setState({\n        error: true\n      });\n    }\n \n\n\n  };\n \n  render(){\n  return(\n    <div className=\"App\">\n       <Form loadweather={this.getWeather}error={this.state.error}/>\n\n    <Weather\n    city={this.state.city}\n    country={this.state.country}\n   temp_celsius={this.state.celsius}\n    temp_max={this.state.temp_max}\n    temp_min={this.state.temp_min}\n    description={this.state.description}\n    weatherIcon={this.state.icon}\n\n    />\n   \n\n  </div>\n  );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}